---
name: Testing and Deployment Workflow
glob: "**/*"
priority: 1
type: always
---

# Testing and Deployment Workflow

## Always Test Before Committing
- Run all relevant tests before committing any code changes
- For frontend changes: Run `npm test` or `yarn test` in the frontend directory
- For worker changes: Run the appropriate test command in the worker directory
- Never skip tests, even for "minor" changes

## Staging Branch Workflow
When tests pass:
1. Commit changes with descriptive commit messages
2. Push to a feature branch first (never directly to main/master)
3. Create or update the staging branch with:
   ```bash
   git checkout staging
   git merge <feature-branch>
   git push origin staging
   ```
4. Only merge to main/master after staging validation

## Test Coverage Requirements
- Ensure new features have corresponding tests
- Maintain or improve existing test coverage
- Include unit tests for critical functions
- Add integration tests for API endpoints

## Pre-commit Checklist
Before any commit:
- [ ] All tests pass locally
- [ ] Code follows project linting rules
- [ ] No console.logs or debug statements in production code
- [ ] Environment variables are properly documented
- [ ] Dependencies are up to date and secure

## Staging Environment Validation
After pushing to staging:
- Verify deployment succeeds
- Run smoke tests on staging environment
- Check for any performance regressions
- Validate all integrations work correctly

## Emergency Hotfix Protocol
For critical production issues only:
1. Create hotfix branch from main/master
2. Apply minimal fix
3. Run abbreviated test suite
4. Push to staging for quick validation
5. Fast-track to production with proper documentation

**Remember: The staging branch is your safety net. Always validate there before production!**