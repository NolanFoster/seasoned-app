name: Clipper Tests

# This workflow has been updated to use Vitest for testing
# Coverage is collected using Vitest's built-in v8 coverage provider

on:
  push:
    branches: [ main, staging ]
    paths:
      - 'clipper/**'
      - '.github/workflows/clipper-tests.yml'
      - 'shared/**'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main, staging ]
    paths:
      - 'clipper/**'
      - '.github/workflows/clipper-tests.yml'
      - 'shared/**'
      - 'package.json'
      - 'package-lock.json'

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  test-worker:
    name: Clipper Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: clipper/package-lock.json
    
    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov
    
    - name: Install Worker Dependencies
      working-directory: ./clipper
      run: npm ci
    
    - name: Run Worker Tests with Coverage
      working-directory: ./clipper
      run: |
        # Debug: Show test files
        echo "📋 Test files in directory:"
        ls -la tests/
        
        # Run tests with coverage collection
        echo "🔍 Running npm run test:coverage"
        npm run test:coverage || true
        
        # Check if coverage was generated
        if [ -d coverage ]; then
          echo "✅ Coverage directory created"
          ls -la coverage/
        else
          echo "⚠️ Coverage directory not found"
        fi
    
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: clipper-coverage-reports
        path: |
          clipper/coverage/
        retention-days: 30
    
    - name: Coverage Summary
      working-directory: ./clipper
      run: |
        if [ -f coverage/lcov.info ]; then
          echo "## 📊 Clipper Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract coverage percentages from lcov.info
          if command -v lcov >/dev/null 2>&1; then
            lcov --summary coverage/lcov.info 2>/dev/null | grep -E "(lines|functions|branches)" >> $GITHUB_STEP_SUMMARY || true
          fi
          
          # Show Vitest coverage summary if available
          if [ -f coverage/coverage-summary.json ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json | jq '.total' >> $GITHUB_STEP_SUMMARY 2>/dev/null || cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          # Show coverage thresholds
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage Thresholds" >> $GITHUB_STEP_SUMMARY
          echo "- Lines: 10%" >> $GITHUB_STEP_SUMMARY
          echo "- Functions: 10%" >> $GITHUB_STEP_SUMMARY
          echo "- Branches: 10%" >> $GITHUB_STEP_SUMMARY
          echo "- Statements: 10%" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ No Coverage Data Generated" >> $GITHUB_STEP_SUMMARY
          echo "Coverage collection may have failed or no tests were run." >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Comment Coverage Report on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## 📊 Clipper Coverage Report (Vitest)\n\n';
          
          const coveragePath = 'clipper/coverage/lcov.info';
          if (fs.existsSync(coveragePath)) {
            try {
              // Read and parse coverage data
              const coverageData = fs.readFileSync(coveragePath, 'utf8');
              const lines = coverageData.split('\n');
              
              let totalLines = 0, coveredLines = 0;
              let totalFunctions = 0, coveredFunctions = 0;
              let totalBranches = 0, coveredBranches = 0;
              
              for (const line of lines) {
                if (line.startsWith('LF:')) totalLines += parseInt(line.split(':')[1]);
                if (line.startsWith('LH:')) coveredLines += parseInt(line.split(':')[1]);
                if (line.startsWith('FNF:')) totalFunctions += parseInt(line.split(':')[1]);
                if (line.startsWith('FNH:')) coveredFunctions += parseInt(line.split(':')[1]);
                if (line.startsWith('BRF:')) totalBranches += parseInt(line.split(':')[1]);
                if (line.startsWith('BRH:')) coveredBranches += parseInt(line.split(':')[1]);
              }
              
              const linePercent = totalLines > 0 ? ((coveredLines / totalLines) * 100).toFixed(1) : 'N/A';
              const functionPercent = totalFunctions > 0 ? ((coveredFunctions / totalFunctions) * 100).toFixed(1) : 'N/A';
              const branchPercent = totalBranches > 0 ? ((coveredBranches / totalBranches) * 100).toFixed(1) : 'N/A';
              
              comment += `| Metric | Coverage | Covered/Total |\n`;
              comment += `|--------|----------|---------------|\n`;
              comment += `| Lines | ${linePercent}% | ${coveredLines}/${totalLines} |\n`;
              comment += `| Functions | ${functionPercent}% | ${coveredFunctions}/${totalFunctions} |\n`;
              comment += `| Branches | ${branchPercent}% | ${coveredBranches}/${totalBranches} |\n\n`;
              
              // Check for coverage summary JSON
              const summaryPath = 'clipper/coverage/coverage-summary.json';
              if (fs.existsSync(summaryPath)) {
                try {
                  const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
                  if (summary.total) {
                    comment += '\n\n### Detailed Coverage:\n';
                    comment += `- Statements: ${summary.total.statements.pct}%\n`;
                    comment += `- Branches: ${summary.total.branches.pct}%\n`;
                    comment += `- Functions: ${summary.total.functions.pct}%\n`;
                    comment += `- Lines: ${summary.total.lines.pct}%\n`;
                  }
                } catch (e) {
                  // Ignore JSON parse errors
                }
              }
              
              // Coverage status
              const minCoverage = 10; // From vitest.config.js
              const overallGood = parseFloat(linePercent) >= minCoverage && parseFloat(functionPercent) >= minCoverage;
              comment += '\n' + (overallGood ? '✅ Coverage meets requirements!' : '⚠️ Coverage below threshold (10%)');
              
            } catch (error) {
              comment += '⚠️ Error parsing coverage data: ' + error.message;
            }
          } else {
            comment += '❌ No coverage data found. Tests may have failed or coverage collection is not working properly.';
          }
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('📊 Clipper Coverage Report')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  lint-worker:
    name: Clipper Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Lint Worker
      working-directory: ./clipper
      run: |
        if npm run | grep -q "lint"; then
          npm run lint
        else
          echo "No lint script found, skipping linting"
        fi
