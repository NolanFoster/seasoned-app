name: Frontend Tests and Coverage

on:
  push:
    branches: [ main, staging ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-tests.yml'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main, staging ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-tests.yml'
      - 'package.json'
      - 'package-lock.json'

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  test-frontend:
    name: Frontend Tests and Coverage
    runs-on: ubuntu-latest
    outputs:
      diff_coverage_available: ${{ steps.diff-coverage.outputs.diff_coverage_available }}
      diff_coverage_below_threshold: ${{ steps.diff-coverage.outputs.diff_coverage_below_threshold }}
      diff_coverage_percentage: ${{ steps.diff-coverage.outputs.diff_coverage_percentage }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for diff coverage
        
    - name: Fetch base branch for diff coverage
      if: github.event_name == 'pull_request'
      run: |
        git fetch origin ${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run Frontend Tests with Coverage
      working-directory: ./frontend
      run: npm run test:coverage
    
    - name: Check Coverage Thresholds
      id: coverage-check
      working-directory: ./frontend
      run: |
        echo "### Frontend Coverage Results" >> $GITHUB_STEP_SUMMARY
        
        # Run coverage again to get the output for parsing
        COVERAGE_OUTPUT=$(npm run test:coverage 2>&1)
        echo "$COVERAGE_OUTPUT"
        
        # Parse coverage percentages from Jest output
        # Look for lines like "All files |   88.06 |    81.11 |   94.11 |   88.06 |"
        COVERAGE_LINE=$(echo "$COVERAGE_OUTPUT" | grep "All files" | head -1)
        
        # Debug output
        echo "Coverage line found: '$COVERAGE_LINE'"
        
        if [ -n "$COVERAGE_LINE" ]; then
          # Extract percentages using awk, handling the pipe-separated format
          # Format: "All files |   88.06 |    81.11 |   94.11 |   88.06 | [uncovered lines]"
          # Field positions: 1=filename, 2=statements, 3=branches, 4=functions, 5=lines, 6=uncovered
          STATEMENTS=$(echo "$COVERAGE_LINE" | awk -F'|' '{gsub(/[[:space:]]/, "", $2); print $2}')
          BRANCHES=$(echo "$COVERAGE_LINE" | awk -F'|' '{gsub(/[[:space:]]/, "", $3); print $3}')
          FUNCTIONS=$(echo "$COVERAGE_LINE" | awk -F'|' '{gsub(/[[:space:]]/, "", $4); print $4}')
          LINES=$(echo "$COVERAGE_LINE" | awk -F'|' '{gsub(/[[:space:]]/, "", $5); print $5}')
          
          # Debug output
          echo "Parsed coverage values:"
          echo "  Statements: $STATEMENTS%"
          echo "  Branches: $BRANCHES%"
          echo "  Functions: $FUNCTIONS%"
          echo "  Lines: $LINES%"
          
          # Validate that we got numeric values
          if ! [[ "$STATEMENTS" =~ ^[0-9]+\.?[0-9]*$ ]]; then
            echo "Warning: Invalid statements value: '$STATEMENTS'"
            STATEMENTS="0"
          fi
          if ! [[ "$BRANCHES" =~ ^[0-9]+\.?[0-9]*$ ]]; then
            echo "Warning: Invalid branches value: '$BRANCHES'"
            BRANCHES="0"
          fi
          if ! [[ "$FUNCTIONS" =~ ^[0-9]+\.?[0-9]*$ ]]; then
            echo "Warning: Invalid functions value: '$FUNCTIONS'"
            FUNCTIONS="0"
          fi
          if ! [[ "$LINES" =~ ^[0-9]+\.?[0-9]*$ ]]; then
            echo "Warning: Invalid lines value: '$LINES'"
            LINES="0"
          fi
        else
          # Fallback values if parsing fails
          echo "Warning: Could not find coverage line in output"
          STATEMENTS="0"
          BRANCHES="0"
          FUNCTIONS="0"
          LINES="0"
        fi
        
        # Set coverage thresholds (matching Jest config)
        THRESHOLD_STATEMENTS=60
        THRESHOLD_BRANCHES=60
        THRESHOLD_FUNCTIONS=60
        THRESHOLD_LINES=60
        
        # Check if coverage meets thresholds
        COVERAGE_FAILED=false
        
        if (( $(echo "$STATEMENTS < $THRESHOLD_STATEMENTS" | bc -l) )); then
          echo "❌ Statement coverage ($STATEMENTS%) is below threshold ($THRESHOLD_STATEMENTS%)"
          COVERAGE_FAILED=true
        fi
        
        if (( $(echo "$BRANCHES < $THRESHOLD_BRANCHES" | bc -l) )); then
          echo "❌ Branch coverage ($BRANCHES%) is below threshold ($THRESHOLD_BRANCHES%)"
          COVERAGE_FAILED=true
        fi
        
        if (( $(echo "$FUNCTIONS < $THRESHOLD_FUNCTIONS" | bc -l) )); then
          echo "❌ Function coverage ($FUNCTIONS%) is below threshold ($THRESHOLD_FUNCTIONS%)"
          COVERAGE_FAILED=true
        fi
        
        if (( $(echo "$LINES < $THRESHOLD_LINES" | bc -l) )); then
          echo "❌ Line coverage ($LINES%) is below threshold ($THRESHOLD_LINES%)"
          COVERAGE_FAILED=true
        fi
        
        # Set outputs before potential exit
        echo "coverage_available=true" >> $GITHUB_OUTPUT
        echo "coverage_lines=$LINES" >> $GITHUB_OUTPUT
        echo "coverage_statements=$STATEMENTS" >> $GITHUB_OUTPUT
        echo "coverage_functions=$FUNCTIONS" >> $GITHUB_OUTPUT
        echo "coverage_branches=$BRANCHES" >> $GITHUB_OUTPUT
        
        if [ "$COVERAGE_FAILED" = true ]; then
          echo "coverage_below_threshold=true" >> $GITHUB_OUTPUT
          echo "❌ **Coverage is below the required 60% threshold**" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        echo "✅ All coverage thresholds met!" >> $GITHUB_STEP_SUMMARY
        echo "   Statements: $STATEMENTS% (threshold: $THRESHOLD_STATEMENTS%)" >> $GITHUB_STEP_SUMMARY
        echo "   Branches: $BRANCHES% (threshold: $THRESHOLD_BRANCHES%)" >> $GITHUB_STEP_SUMMARY
        echo "   Functions: $FUNCTIONS% (threshold: $THRESHOLD_FUNCTIONS%)" >> $GITHUB_STEP_SUMMARY
        echo "   Lines: $LINES% (threshold: $THRESHOLD_LINES%)" >> $GITHUB_STEP_SUMMARY
        echo "coverage_below_threshold=false" >> $GITHUB_OUTPUT
    
    - name: Upload Frontend Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/
    
    - name: Generate Diff Coverage Report (PR only)
      if: github.event_name == 'pull_request'
      id: diff-coverage
      working-directory: ./frontend
      run: |
        # Install diff-cover for differential coverage
        pip install diff-cover
        
        # Check if coverage report exists
        if [ ! -f coverage/lcov.info ]; then
          echo "⚠️ No coverage report found, skipping differential coverage check" >> $GITHUB_STEP_SUMMARY
          echo "diff_coverage_available=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "### Differential Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Run diff-cover with lcov format and capture output
        echo "Running differential coverage analysis..."
        diff-cover coverage/lcov.info \
          --compare-branch=origin/${{ github.base_ref }} \
          --fail-under=85 \
          --diff-range-notation=... 2>&1 | tee diff-coverage-output.txt || {
          echo "::warning::New code changes have less than 85% coverage"
          echo "❌ **New code coverage is below the required 85% threshold**" >> $GITHUB_STEP_SUMMARY
          echo "diff_coverage_below_threshold=true" >> $GITHUB_OUTPUT
        }
        
        # Extract diff coverage percentage for PR comment
        if grep -q "Diff coverage" diff-coverage-output.txt; then
          coverage_line=$(grep "Diff coverage" diff-coverage-output.txt)
          # Extract percentage from the line (e.g., "Diff coverage is 75.5%")
          diff_percentage=$(echo "$coverage_line" | grep -oE '[0-9]+\.?[0-9]*' | head -1)
          echo "diff_coverage_percentage=$diff_percentage" >> $GITHUB_OUTPUT
          echo "diff_coverage_available=true" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 ${coverage_line}" >> $GITHUB_STEP_SUMMARY
        elif grep -q "No lines with coverage information in this diff" diff-coverage-output.txt; then
          # Handle case where there are no lines with coverage information
          echo "diff_coverage_percentage=N/A" >> $GITHUB_OUTPUT
          echo "diff_coverage_available=true" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 No lines with coverage information in this diff - this is normal when changes don't affect testable code" >> $GITHUB_STEP_SUMMARY
        else
          echo "diff_coverage_available=false" >> $GITHUB_OUTPUT
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Required: 85% coverage for new/modified code**" >> $GITHUB_STEP_SUMMARY

  lint-frontend:
    name: Frontend Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Lint Frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run lint || echo "Linting completed with warnings"

  coverage-report:
    name: Frontend Coverage Report
    needs: [test-frontend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Frontend Coverage
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage
        path: ./coverage-reports/frontend
      continue-on-error: true
    
    - name: Coverage Summary
      id: coverage-summary
      run: |
        echo "## Frontend Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d ./coverage-reports/frontend ]; then
          echo "✅ Frontend coverage reports available" >> $GITHUB_STEP_SUMMARY
          
          # Extract and display coverage percentages from JSON summary
          if [ -f ./coverage-reports/frontend/coverage-summary.json ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Coverage Metrics:" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
            
            # Parse coverage summary using jq
            sudo apt-get install -y jq
            
            lines=$(jq -r '.total.lines.pct' ./coverage-reports/frontend/coverage-summary.json)
            statements=$(jq -r '.total.statements.pct' ./coverage-reports/frontend/coverage-summary.json)
            functions=$(jq -r '.total.functions.pct' ./coverage-reports/frontend/coverage-summary.json)
            branches=$(jq -r '.total.branches.pct' ./coverage-reports/frontend/coverage-summary.json)
            
            echo "| Lines | ${lines}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Statements | ${statements}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | ${functions}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | ${branches}% |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Minimum Required: 60%**" >> $GITHUB_STEP_SUMMARY
            
            # Check if any metric is below threshold and set output
            if (( $(echo "$lines < 60" | bc -l) )) || \
               (( $(echo "$statements < 60" | bc -l) )) || \
               (( $(echo "$functions < 60" | bc -l) )) || \
               (( $(echo "$branches < 60" | bc -l) )); then
              echo "coverage_below_threshold=true" >> $GITHUB_OUTPUT
            else
              echo "coverage_below_threshold=false" >> $GITHUB_OUTPUT
            fi
            
            # Store coverage values for PR comment
            echo "coverage_lines=$lines" >> $GITHUB_OUTPUT
            echo "coverage_statements=$statements" >> $GITHUB_OUTPUT
            echo "coverage_functions=$functions" >> $GITHUB_OUTPUT
            echo "coverage_branches=$branches" >> $GITHUB_OUTPUT
            echo "coverage_available=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ coverage-summary.json not found in frontend coverage reports" >> $GITHUB_STEP_SUMMARY
            echo "coverage_available=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "⚠️ No frontend coverage reports found" >> $GITHUB_STEP_SUMMARY
          echo "coverage_available=false" >> $GITHUB_OUTPUT
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Coverage artifacts have been uploaded and are available in the workflow run." >> $GITHUB_STEP_SUMMARY
    
    - name: Post PR Comment with Coverage
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        script: |
          const fs = require('fs');
          
          // Get coverage data from previous step outputs
          const coverageAvailable = '${{ steps.coverage-summary.outputs.coverage_available }}' === 'true';
          const coverageBelowThreshold = '${{ steps.coverage-summary.outputs.coverage_below_threshold }}' === 'true';
          
          // Get diff coverage data from test-frontend job
          const diffCoverageAvailable = '${{ needs.test-frontend.outputs.diff_coverage_available }}' === 'true';
          const diffCoverageBelowThreshold = '${{ needs.test-frontend.outputs.diff_coverage_below_threshold }}' === 'true';
          const diffCoveragePercentage = '${{ needs.test-frontend.outputs.diff_coverage_percentage }}';
          
          // Check if any threshold is not met
          const anyThresholdNotMet = coverageBelowThreshold || diffCoverageBelowThreshold;
          
          // Start building the comment - add @cursoragent at top if thresholds not met
          let comment = '';
          if (anyThresholdNotMet) {
            comment += '@cursoragent\n\n';
          }
          comment += '## 📊 Frontend Coverage Report\n\n';
          
          try {
            // Overall Coverage Section
            if (coverageAvailable) {
              comment += '### Overall Coverage\n';
              comment += '| Metric | Coverage | Threshold | Status |\n';
              comment += '|--------|----------|-----------|--------|\n';
              
              const lines = parseFloat('${{ steps.coverage-summary.outputs.coverage_lines }}');
              const statements = parseFloat('${{ steps.coverage-summary.outputs.coverage_statements }}');
              const functions = parseFloat('${{ steps.coverage-summary.outputs.coverage_functions }}');
              const branches = parseFloat('${{ steps.coverage-summary.outputs.coverage_branches }}');
              
              comment += `| Lines | ${lines}% | 60% | ${lines >= 60 ? '✅' : '❌'} |\n`;
              comment += `| Statements | ${statements}% | 60% | ${statements >= 60 ? '✅' : '❌'} |\n`;
              comment += `| Functions | ${functions}% | 60% | ${functions >= 60 ? '✅' : '❌'} |\n`;
              comment += `| Branches | ${branches}% | 60% | ${branches >= 60 ? '✅' : '❌'} |\n`;
              comment += '\n';
              
              if (coverageBelowThreshold) {
                comment += '❌ **Coverage is below the required 60% threshold**\n\n';
              } else {
                comment += '✅ **Coverage meets the required 60% threshold**\n\n';
              }
            } else {
              comment += '⚠️ **No coverage data available**\n\n';
            }
            
            // Differential Coverage Section
            comment += '### Differential Coverage\n';
            if (diffCoverageAvailable && diffCoveragePercentage) {
              if (diffCoveragePercentage === 'N/A') {
                comment += '**Coverage of new/modified code: N/A**\n\n';
                comment += 'ℹ️ _No lines with coverage information in this diff. This is normal when changes don\'t affect testable code (e.g., documentation, configuration, or non-executable code)._\n\n';
              } else {
                comment += `**Coverage of new/modified code: ${diffCoveragePercentage}%**\n\n`;
                comment += '| Type | Coverage | Threshold | Status |\n';
                comment += '|------|----------|-----------|--------|\n';
                const diffPercent = parseFloat(diffCoveragePercentage);
                comment += `| New/Modified Code | ${diffCoveragePercentage}% | 85% | ${diffPercent >= 85 ? '✅' : '❌'} |\n\n`;
                
                if (diffCoverageBelowThreshold) {
                  comment += '❌ **New code coverage is below the required 85% threshold**\n\n';
                } else {
                  comment += '✅ **New code coverage meets the required 85% threshold**\n\n';
                }
              }
            } else {
              comment += 'ℹ️ _No differential coverage data available. This may happen if there are no code changes in the PR._\n\n';
            }
            
            comment += '---\n';
            comment += '_Coverage thresholds: **60%** overall, **85%** for new/modified code_\n';
            comment += '_Coverage analysis is performed inline without generating external reports._';
            
            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user?.type === 'Bot' && comment.body?.includes('📊 Frontend Coverage Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
            
            console.log('Frontend coverage comment posted successfully');
          } catch (error) {
            console.error('Failed to post frontend coverage comment:', error);
            console.log('This may be due to permissions. The coverage report is still available in the workflow summary.');
            
            // Still add to summary even if comment fails
            core.summary.addRaw(comment).write();
          }
