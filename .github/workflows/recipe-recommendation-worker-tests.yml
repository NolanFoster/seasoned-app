name: Recipe Recommendation Worker Tests

on:
  push:
    branches: [ main, staging ]
    paths:
      - 'recipe-recommendation-worker/**'
      - '.github/workflows/recipe-recommendation-worker-tests.yml'
      - 'shared/**'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main, staging ]
    paths:
      - 'recipe-recommendation-worker/**'
      - '.github/workflows/recipe-recommendation-worker-tests.yml'
      - 'shared/**'
      - 'package.json'
      - 'package-lock.json'

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  test-worker:
    name: Recipe Recommendation Worker Tests
    runs-on: ubuntu-latest
    outputs:
      coverage_available: ${{ steps.coverage-check.outputs.coverage_available }}
      coverage_below_threshold: ${{ steps.coverage-check.outputs.coverage_below_threshold }}
      coverage_lines: ${{ steps.coverage-check.outputs.coverage_lines }}
      coverage_statements: ${{ steps.coverage-check.outputs.coverage_statements }}
      coverage_functions: ${{ steps.coverage-check.outputs.coverage_functions }}
      coverage_branches: ${{ steps.coverage-check.outputs.coverage_branches }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: recipe-recommendation-worker/package-lock.json
    
    - name: Install Worker Dependencies
      working-directory: ./recipe-recommendation-worker
      run: npm ci
    
    - name: Run Worker Tests with Coverage
      working-directory: ./recipe-recommendation-worker
      run: |
        echo "Running tests with coverage..."
        npm run coverage
        echo "✅ Tests passed successfully!"
    
    - name: Check Coverage Thresholds
      id: coverage-check
      working-directory: ./recipe-recommendation-worker
      run: |
        echo "### Recipe Recommendation Worker Coverage Results" >> $GITHUB_STEP_SUMMARY
        
        # Run coverage again to get the output for parsing
        COVERAGE_OUTPUT=$(npm run coverage 2>&1)
        echo "$COVERAGE_OUTPUT"
        
        # Parse coverage percentages from Vitest output
        # Look for lines like "All files |   88.06 |    81.11 |   94.11 |   88.06 |"
        COVERAGE_LINE=$(echo "$COVERAGE_OUTPUT" | grep "All files" | head -1)
        
        # Debug output
        echo "Coverage line found: '$COVERAGE_LINE'"
        
        if [ -n "$COVERAGE_LINE" ]; then
          # Extract percentages using awk, handling the pipe-separated format
          # Format: "All files |   88.06 |    81.11 |   94.11 |   88.06 |"
          STATEMENTS=$(echo "$COVERAGE_LINE" | awk -F'|' '{gsub(/[[:space:]]/, "", $3); print $3}')
          BRANCHES=$(echo "$COVERAGE_LINE" | awk -F'|' '{gsub(/[[:space:]]/, "", $4); print $4}')
          FUNCTIONS=$(echo "$COVERAGE_LINE" | awk -F'|' '{gsub(/[[:space:]]/, "", $5); print $5}')
          LINES=$(echo "$COVERAGE_LINE" | awk -F'|' '{gsub(/[[:space:]]/, "", $6); print $6}')
          
          # Debug output
          echo "Parsed coverage values:"
          echo "  Statements: $STATEMENTS%"
          echo "  Branches: $BRANCHES%"
          echo "  Functions: $FUNCTIONS%"
          echo "  Lines: $LINES%"
        else
          # Fallback values if parsing fails
          echo "Warning: Could not find coverage line in output"
          STATEMENTS="0"
          BRANCHES="0"
          FUNCTIONS="0"
          LINES="0"
        fi
        
        # Set coverage thresholds (updated to match our improved coverage)
        THRESHOLD_STATEMENTS=80
        THRESHOLD_BRANCHES=80
        THRESHOLD_FUNCTIONS=80
        THRESHOLD_LINES=80
        
        # Check if coverage meets thresholds
        COVERAGE_FAILED=false
        
        if (( $(echo "$STATEMENTS < $THRESHOLD_STATEMENTS" | bc -l) )); then
          echo "❌ Statement coverage ($STATEMENTS%) is below threshold ($THRESHOLD_STATEMENTS%)"
          COVERAGE_FAILED=true
        fi
        
        if (( $(echo "$BRANCHES < $THRESHOLD_BRANCHES" | bc -l) )); then
          echo "❌ Branch coverage ($BRANCHES%) is below threshold ($THRESHOLD_BRANCHES%)"
          COVERAGE_FAILED=true
        fi
        
        if (( $(echo "$FUNCTIONS < $THRESHOLD_FUNCTIONS" | bc -l) )); then
          echo "❌ Function coverage ($FUNCTIONS%) is below threshold ($THRESHOLD_FUNCTIONS%)"
          COVERAGE_FAILED=true
        fi
        
        if (( $(echo "$LINES < $THRESHOLD_LINES" | bc -l) )); then
          echo "❌ Line coverage ($LINES%) is below threshold ($THRESHOLD_LINES%)"
          COVERAGE_FAILED=true
        fi
        
        # Set outputs before potential exit
        echo "coverage_available=true" >> $GITHUB_OUTPUT
        echo "coverage_lines=$LINES" >> $GITHUB_OUTPUT
        echo "coverage_statements=$STATEMENTS" >> $GITHUB_OUTPUT
        echo "coverage_functions=$FUNCTIONS" >> $GITHUB_OUTPUT
        echo "coverage_branches=$BRANCHES" >> $GITHUB_OUTPUT
        
        if [ "$COVERAGE_FAILED" = true ]; then
          echo "coverage_below_threshold=true" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "✅ All coverage thresholds met!"
        echo "   Statements: $STATEMENTS% (threshold: $THRESHOLD_STATEMENTS%)"
        echo "   Branches: $BRANCHES% (threshold: $THRESHOLD_BRANCHES%)"
        echo "   Functions: $FUNCTIONS% (threshold: $THRESHOLD_FUNCTIONS%)"
        echo "   Lines: $LINES% (threshold: $THRESHOLD_LINES%)"
        echo "coverage_below_threshold=false" >> $GITHUB_OUTPUT
    
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: recipe-recommendation-worker-coverage
        path: recipe-recommendation-worker/coverage/
        retention-days: 30

  lint-worker:
    name: Recipe Recommendation Worker Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Lint Worker
      working-directory: ./recipe-recommendation-worker
      run: |
        npm ci
        if npm run | grep -q "lint"; then
          npm run lint || echo "Linting completed with warnings"
        else
          echo "No lint script found"
        fi

  coverage-report:
    name: Recipe Recommendation Worker Coverage Report
    needs: [test-worker]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Post PR Comment with Coverage
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        script: |
          const coverageAvailable = '${{ needs.test-worker.outputs.coverage_available }}' === 'true';
          const coverageBelowThreshold = '${{ needs.test-worker.outputs.coverage_below_threshold }}' === 'true';
          
          let comment = '';
          if (coverageBelowThreshold) {
            comment += '@cursoragent\n\n';
          }
          comment += '## 📊 Recipe Recommendation Worker Coverage Report\n\n';
          
          try {
            if (coverageAvailable) {
              comment += '### Coverage Metrics\n';
              comment += '| Metric | Coverage | Threshold | Status |\n';
              comment += '|--------|----------|-----------|--------|\n';
              
              const lines = parseFloat('${{ needs.test-worker.outputs.coverage_lines }}');
              const statements = parseFloat('${{ needs.test-worker.outputs.coverage_statements }}');
              const functions = parseFloat('${{ needs.test-worker.outputs.coverage_functions }}');
              const branches = parseFloat('${{ needs.test-worker.outputs.coverage_branches }}');
              
              // Updated thresholds to match improved coverage
              comment += `| Lines | ${lines}% | 80% | ${lines >= 80 ? '✅' : '❌'} |\n`;
              comment += `| Statements | ${statements}% | 80% | ${statements >= 80 ? '✅' : '❌'} |\n`;
              comment += `| Functions | ${functions}% | 80% | ${functions >= 80 ? '✅' : '❌'} |\n`;
              comment += `| Branches | ${branches}% | 80% | ${branches >= 80 ? '✅' : '❌'} |\n`;
              comment += '\n';
              
              if (coverageBelowThreshold) {
                comment += '❌ **Coverage is below the required thresholds**\n\n';
              } else {
                comment += '✅ **Coverage meets the required thresholds**\n\n';
              }
            } else {
              comment += '⚠️ **No coverage data available**\n\n';
            }
            
            comment += '---\n';
            comment += '_Coverage thresholds are set to 80% for all metrics._';
            
            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user?.type === 'Bot' && comment.body?.includes('📊 Recipe Recommendation Worker Coverage Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
            
            console.log('Recipe Recommendation Worker coverage comment posted successfully');
          } catch (error) {
            console.error('Failed to post coverage comment:', error);
            console.log('This may be due to permissions. The coverage report is still available in the workflow summary.');
            
            // Still add to summary even if comment fails
            core.summary.addRaw(comment).write();
          }
