2025-08-22T02:12:11.5688920Z ##[group]Run actions/github-script@v7
2025-08-22T02:12:11.5689211Z with:
2025-08-22T02:12:11.5697541Z   script: const fs = require('fs');
const path = require('path');

let comment = '## 📊 Clipper Coverage Report\n\n';

const coveragePath = 'clipper/coverage/lcov.info';
if (fs.existsSync(coveragePath)) {
  try {
    // Read and parse coverage data
    const coverageData = fs.readFileSync(coveragePath, 'utf8');
    const lines = coverageData.split('\n');
    
    let totalLines = 0, coveredLines = 0;
    let totalFunctions = 0, coveredFunctions = 0;
    let totalBranches = 0, coveredBranches = 0;
    
    for (const line of lines) {
      if (line.startsWith('LF:')) totalLines += parseInt(line.split(':')[1]);
      if (line.startsWith('LH:')) coveredLines += parseInt(line.split(':')[1]);
      if (line.startsWith('FNF:')) totalFunctions += parseInt(line.split(':')[1]);
      if (line.startsWith('FNH:')) coveredFunctions += parseInt(line.split(':')[1]);
      if (line.startsWith('BRF:')) totalBranches += parseInt(line.split(':')[1]);
      if (line.startsWith('BRH:')) coveredBranches += parseInt(line.split(':')[1]);
    }
    
    const linePercent = totalLines > 0 ? ((coveredLines / totalLines) * 100).toFixed(1) : 'N/A';
    const functionPercent = totalFunctions > 0 ? ((coveredFunctions / totalFunctions) * 100).toFixed(1) : 'N/A';
    const branchPercent = totalBranches > 0 ? ((coveredBranches / totalBranches) * 100).toFixed(1) : 'N/A';
    
    comment += `| Metric | Coverage | Covered/Total |\n`;
    comment += `|--------|----------|---------------|\n`;
    comment += `| Lines | ${linePercent}% | ${coveredLines}/${totalLines} |\n`;
    comment += `| Functions | ${functionPercent}% | ${coveredFunctions}/${totalFunctions} |\n`;
    comment += `| Branches | ${branchPercent}% | ${coveredBranches}/${totalBranches} |\n\n`;
    
    // Coverage status
    const minCoverage = 10; // From .c8rc.json
    const overallGood = parseFloat(linePercent) >= minCoverage && parseFloat(functionPercent) >= minCoverage;
    comment += overallGood ? '✅ Coverage meets requirements!' : '⚠️ Coverage below threshold (10%)';
    
  } catch (error) {
    comment += '⚠️ Error parsing coverage data: ' + error.message;
  }
} else {
  comment += '❌ No coverage data found. Tests may have failed or coverage collection is not working properly.';
}

// Find existing comment
const { data: comments } = await github.rest.issues.listComments({
  owner: context.repo.owner,
  repo: context.repo.repo,
  issue_number: context.issue.number,
});

const existingComment = comments.find(comment => 
  comment.body.includes('📊 Clipper Coverage Report')
);

if (existingComment) {
  await github.rest.issues.updateComment({
    owner: context.repo.owner,
    repo: context.repo.repo,
    comment_id: existingComment.id,
    body: comment
  });
} else {
  await github.rest.issues.createComment({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: context.issue.number,
    body: comment
  });
}

2025-08-22T02:12:11.5705800Z   github-token: ***
2025-08-22T02:12:11.5706003Z   debug: false
2025-08-22T02:12:11.5706200Z   user-agent: actions/github-script
2025-08-22T02:12:11.5706451Z   result-encoding: json
2025-08-22T02:12:11.5706640Z   retries: 0
2025-08-22T02:12:11.5706973Z   retry-exempt-status-codes: 400,401,403,404,422
2025-08-22T02:12:11.5707246Z ##[endgroup]
