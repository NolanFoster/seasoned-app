{
  "version": 3,
  "sources": ["../../starback/src/utils.ts", "../../starback/src/types/dot.ts", "../../starback/src/types/line.ts", "../../starback/src/index.ts", "../../starback/src/starback.ts"],
  "sourcesContent": ["/**\n * Get random number between two given number.\n * @param {Number} min Minimum Number\n * @param {Number} max Maximum Number\n * @returns {Number} The random number result\n*/\nexport function randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + 1) + min\n}\n\nexport function randomArr(arr) {\n    return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Convert angle degree to sin degree\n * @param {*} angleDeg \n */\nexport function sinDeg(angleDeg) {\n    return Math.sin(angleDeg * (Math.PI / 180))\n}\n\n/**\n * Convert angle degree to cos degree\n * @param {*} angleDeg \n */\nexport function cosDeg(angleDeg) {\n    return Math.cos(angleDeg * (Math.PI / 180))\n}", "import { StarDotConfig, StarType } from \"../types\"\nimport { cosDeg, randomArr, randomNumber, sinDeg } from '../utils'\n\nclass Dot implements StarType {\n    /**\n     * Collection of stars\n     * @param\n     */\n    stars = []\n    type: 'dot'\n    config: StarDotConfig = {\n        quantity: 100,\n        direction: 100,\n        speed: [0.5, .8],\n        backgroundColor: '#ccc',\n        starColor: 'white',\n        starSize: [0, 3],\n    }\n    overflowSize = 10\n\n\n    /** @type {HTMLCanvasElement} */\n    canvas = null\n\n    /** @type {CanvasRenderingContext2D} */\n    ctx = null\n    \n    constructor(canvas, config) {\n        this.config = {...this.config, ...config}\n        this.canvas = canvas\n        this.ctx = canvas.getContext('2d')\n        \n    }\n    draw() {\n        \n        for(let i = 0; i < this.stars.length; i++) {\n            let star = this.stars[i]\n            \n\n            this.ctx.beginPath()\n            this.ctx.fillStyle = this.config.starColor\n            this.ctx.save()\n            this.ctx.globalAlpha = star.opacity\n            this.ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2)\n            this.ctx.fill()\n            this.ctx.restore()\n            this.ctx.closePath()\n        }\n    }\n    update() {\n        let dx = sinDeg(this.config.direction) \n        let dy = cosDeg(this.config.direction) \n        \n        for(let i = 0; i < this.stars.length; i++) {\n            let star = this.stars[i]\n            star.x += dx * star.speed\n            star.y += dy * star.speed\n\n            // When the star location is outside the canvas, replace the star with a new one\n            if(star.x > this.canvas.width + this.overflowSize || \n                star.x < 0 - this.overflowSize ||\n                star.y > this.canvas.height + this.overflowSize ||\n                star.y < 0 - this.overflowSize) {\n\n                    this.stars.splice(i, 1)\n                    \n                    let x, y, startX\n\n                    // If the direction is top or bottom\n                    if(dy == -1 || dy == 1) {\n                        startX = 0\n                        x = randomNumber(startX, this.canvas.width)\n                        y = dy == 1 ? 0 : this.canvas.height\n                    }\n                    // If the direction is right or left\n                    else if(dx == -1 || dx == 1) {\n                        startX = dx == 1 ? 0 : this.canvas.width\n                        x = startX + (this.overflowSize * -dx)\n                        y = randomNumber(0, this.canvas.height)\n                    }\n                    // If the direction is bottom-right\n                    else if(dx > 0  && dy > 0) {\n                        startX = -this.overflowSize\n                        x = randomArr([startX, randomNumber(startX, this.canvas.width - this.overflowSize)])\n                        y = x == startX ? randomNumber(startX, this.canvas.height - this.overflowSize) : -this.overflowSize\n                    } \n                    // If the direction is bottom-left\n                    else if(dx < 0  && dy > 0) {\n                        startX = -this.canvas.width + this.overflowSize\n                        x = randomArr ([startX, randomNumber(startX, 0 + this.overflowSize)])\n                        y = x == startX ? randomNumber(startX, 0 - this.canvas.height + this.overflowSize) : -this.overflowSize\n                    } \n                    // If the direction is top-left\n                    else if (dx < 0  && dy < 0) {\n                        startX = this.canvas.width + this.overflowSize\n                        x = randomArr([startX, randomNumber(startX, 0 + this.overflowSize)])\n                        y = x == startX ? randomNumber(startX, 0 + this.overflowSize) : this.canvas.height + this.overflowSize\n                    }\n                    // If the direction is top-right\n                    else if (dx > 0  && dy < 0) {\n                        startX = -this.overflowSize\n                        x = randomArr([startX, randomNumber(startX, this.canvas.width-this.overflowSize)])\n                        y = x == startX ? randomNumber(startX, this.canvas.height - this.overflowSize) : this.canvas.height + this.overflowSize\n                    }\n                    \n                    let newStarLocation = {\n                        x,\n                        y\n                    }\n                    this.generate(1, newStarLocation)\n                }\n        }\n    }\n    generate(amount, location = null) {\n        \n        // Generate star in specific location\n        if(location) {\n            let { x, y } = location\n            let newStar = {\n                x, \n                y, \n                size: this.randomSize(), \n                opacity: this.randomOpacity(),\n                speed: this.randomSpeed()\n            }\n            \n            return this.stars.push(newStar)\n            \n        }\n        \n        // If no location provided, it will generate stars in random locations.\n        for(let i = 0; i < amount; i++) {\n            let x = randomNumber(0, this.canvas.width)\n            let y = randomNumber(0, this.canvas.height)\n            \n\n            this.stars.push({\n                x,\n                y,   \n                size: this.randomSize(),\n                opacity: this.randomOpacity(),\n                speed: this.randomSpeed()\n            })\n        }\n\n    }\n    randomSize() {\n        return typeof this.config.starSize == 'object' ? randomNumber(this.config.starSize[0], this.config.starSize[1]) : this.config.starSize\n    }\n    randomOpacity() {\n        let opacity = this.config.randomOpacity\n        if(typeof opacity == 'boolean') \n            return !opacity ? 1 : (opacity ? Math.random() : 1).toFixed(2)\n        else \n            return (Math.random() * (opacity[1] - opacity[0]) + opacity[0]).toFixed(2)\n    }\n    randomSpeed() {\n        const speed = this.config.speed\n        \n        return typeof Array.isArray(speed) ? Math.random() * (speed[1] - speed[0]) + speed[0] : speed\n    }\n}\n\nexport default Dot", "import { StarLineConfig, StarType } from '../types'\nimport {  randomArr, randomNumber } from '../utils'\n\nclass Line implements StarType {\n    /**\n     * Collection of stars\n     * @param\n     */\n    stars = []\n    config: StarLineConfig = {\n      type: 'line',  \n      slope: { x: 1, y: 1},\n      frequency: 10,\n      speed: 2,\n      starSize: 100,\n      starColor: ['#fb00ff', '#00dde0'],\n      spread: 1,\n      directionY: -1, // 1 = top-to-bottom, 2 = bottom-to-top\n      directionX: 1, // 1 = left-to-right, 2 = right-to-left\n      distanceX: 0.1,\n      quantity: 200\n    }\n    direction = 225\n\n    /** @type {HTMLCanvasElement} */\n    canvas = null\n\n    /** @type {CanvasRenderingContext2D} */\n    ctx = null\n  \n    constructor(canvas, config) {\n      this.config = {...this.config, ...config}\n      this.canvas = canvas\n      this.ctx = canvas.getContext('2d')\n    }\n    draw() {\n        this.ctx.strokeStyle = 'white'\n        this.stars.forEach((star) => {\n          // draw the stars\n          let starColor\n          if (Array.isArray(this.config.starColor)) {\n              starColor = this.ctx.createLinearGradient(0, 0, this.canvas.width, this.canvas.height)\n              this.config.starColor.forEach((color, index) => starColor.addColorStop(index / this.config.starColor.length, color))\n          } else starColor = this.config.starColor\n\n          // pathway with berzier curve\n          this.ctx.save()\n          this.ctx.strokeStyle = starColor\n          this.ctx.beginPath()\n          this.ctx.moveTo(star.start.x, star.start.y)\n          this.ctx.setLineDash([this.config.starSize, star.startPoint * this.config.frequency])\n          this.ctx.lineDashOffset = this.config.directionY * (star.progress + star.length)\n          this.ctx.quadraticCurveTo(star.curve.x, star.curve.y, star.end.x, star.end.y)\n          this.ctx.stroke()\n          this.ctx.closePath()\n          this.ctx.restore()\n        \n\n        })\n    }\n    update() {\n        this.stars.map((star, index) => {\n            star.progress += star.speed\n            // if(star.y - star.height > this.canvas.height) return stars.splice(index,1)\n        })\n    }\n    \n  generate() {\n\n    for(let i = 0; i < this.config.quantity; i++) {\n      const x = randomNumber(-20, this.canvas.width)\n      const y = x <= 0 ? randomNumber(0, this.canvas.height) : 0\n      const height = 100\n      const endX = x + (this.canvas.width * this.config.distanceX + this.config.spread * x * this.config.directionX)\n      const adjacentWidth = endX - x\n      const length = this.canvas.height\n  \n      this.stars.push({\n        x,\n        y,\n        length,\n        height,\n        progress: 0,\n        speed: this.config.speed + Math.random() / 5,\n        lineDash: randomNumber(50, 100),\n        filter: {\n          opacity: randomArr([randomNumber(20, 100) + '%', false]),\n        },\n        start: {\n          x,\n          y,\n        },\n        curve: {\n          x: x + adjacentWidth * this.config.slope.x,\n          y: y + this.canvas.height * this.config.slope.y,\n        },\n        startPoint: randomNumber(10, 100),\n        end: {\n          x: endX,\n          y: this.canvas.height,\n        },\n      })\n    }\n    return this.stars\n  }\n    \n}\n\nexport default Line", "import { StarbackConfig, StarbackInterface, StarType } from \"./types\"\nimport Dot from \"./types/dot\"\nimport Line from \"./types/line\"\n\n/**\n * Default Config\n * @type {Object}\n */\nconst StarbackDefaultConfig: StarbackConfig = {\n  width: 800,\n  height: 600,\n\n  randomOpacity: true,\n  showFps: false,\n  type: 'dot'\n}\n\n/**\n * Starback class wrapper\n * @class Starback\n */\nexport default class Starback implements StarbackInterface {\n  static DefaultConfig = StarbackDefaultConfig\n\n  private ctx\n  public config: StarbackConfig = {}\n  public stars: StarType = null\n  public canvas = null\n  public starTypes = {\n    'dot': Dot,\n    'line': Line\n  }\n  public fps = 0\n  private repeat = 0\n\n  private lastCalledTime = 0\n  private lastGenerated = 0\n  private frontCallbacks: Function[] = []\n  private behindCallbacks: Function[] = []\n\n\n  /**\n   * Starback library\n   * @param {HTMLElement|string} Canvas element or the selector\n   * @param {Object} options\n   */\n  constructor(canvas: HTMLCanvasElement | string, config = {}) {\n    this.canvas = canvas instanceof HTMLCanvasElement ? canvas : document.querySelector(canvas)\n\n    this.ctx = this.canvas.getContext('2d')\n\n    // merge config\n    this.mergeConfig(config)\n\n    // storing callbacks\n    this.frontCallbacks = []\n    this.behindCallbacks = []\n\n\n    this.init()\n  }\n\n  static create(canvas: HTMLCanvasElement | string, config: StarbackConfig = {}) {\n    return new Starback(canvas, config)\n  }\n\n  /**\n   * Merge Config\n   * @param  {StarbackDefaultConfig|object} instanceConfig\n   */\n  private mergeConfig(instanceConfig) {\n    // merge config\n    let config = { ...StarbackDefaultConfig, ...instanceConfig }\n\n    // apply config\n    this.config = config\n  }\n\n  /**\n   * Initialize canvas before render\n   */\n  private init() {\n    this.canvas.setAttribute('width', this.config.width)\n    this.canvas.setAttribute('height', this.config.height)\n    this.stars = new this.starTypes[this.config.type](this.canvas, this.config)\n\n    this.generateStar()\n\n    requestAnimationFrame((t) => this.render(t))\n  }\n\n\n  /**\n   * Set background for the whole canvas\n   */\n  private setBackground() {\n    let bg\n\n    if (typeof this.config.backgroundColor == 'string') bg = this.config.backgroundColor\n    else if (typeof this.config.backgroundColor == 'object') {\n      bg = this.ctx.createLinearGradient(this.canvas.width / 2, 0, this.canvas.width / 2, this.canvas.height)\n\n      this.config.backgroundColor.forEach((bgString, index) => {\n        bg.addColorStop(index / this.config.backgroundColor.length, bgString)\n      })\n    }\n    this.ctx.fillStyle = bg\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n  }\n\n  /**\n   * Draw the frame into the canvas\n   */\n  private draw() {\n    this.behindCallbacks.forEach(cb => cb(this.ctx))\n    this.stars.draw()\n    this.frontCallbacks.forEach(cb => cb(this.ctx))\n\n    // Show FPS if config.showFps is enabled\n    if (this.config.showFps) this.drawFps()\n  }\n\n  /**\n   * Update everything in the canvas frame including stars\n   */\n  private update() {\n    this.stars.update()\n  }\n\n  /**\n   * Add an object in front of the stars\n   * @param {Function} cb Callback function\n   */\n  addToFront(cb) {\n    this.frontCallbacks.push(cb)\n  }\n\n  /**\n   * Add an object behind the stars\n   * @param {Function} cb Callback function\n   */\n  addToBehind(cb) {\n    this.behindCallbacks.push(cb)\n  }\n\n  /**\n   * The total quantity of stars in canvas\n   * @param {Number} amount The number of stars\n   */\n  generateStar() {\n    this.stars.generate(this.config.quantity)\n  }\n\n  /**\n   * Draw the FPS in the canvas.\n   */\n  private drawFps() {\n    this.ctx.fillStyle = 'white'\n    this.ctx.fillText(`${this.fps} fps`, 10, 10)\n  }\n\n\n  /**\n   * Canvas render function\n   * @param {DOMHighResTimeStamp} timestamp \n   */\n  private render(timestamp) {\n    if (!this.lastCalledTime) this.lastCalledTime = timestamp\n\n    let deltaTime = timestamp - this.lastCalledTime\n    this.fps = Math.round(1000 / deltaTime)\n    this.lastCalledTime = timestamp\n\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    this.setBackground()\n    this.draw()\n    this.update()\n\n    requestAnimationFrame((t) => this.render(t))\n  }\n\n\n}\n", "import Starback from './index'\nmodule.exports = Starback"],
  "mappings": "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",
  "names": ["randomNumber", "min", "max", "randomArr", "arr", "sinDeg", "angleDeg", "cosDeg", "init_utils", "__esmMin", "Dot", "dot_default", "init_dot", "canvas", "config", "__spreadValues", "i", "star", "dx", "dy", "x", "y", "startX", "newStarLocation", "amount", "location", "newStar", "opacity", "speed", "Line", "line_default", "init_line", "starColor", "color", "index", "height", "endX", "adjacentWidth", "length", "StarbackDefaultConfig", "_Starback", "Starback", "init_src", "instanceConfig", "bg", "bgString", "cb", "timestamp", "deltaTime", "t", "require_starback", "__commonJSMin", "exports", "module"]
}
